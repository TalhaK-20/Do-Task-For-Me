<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
    <link href="./css/admin/admin-dashboard.css" rel="stylesheet">
    <link rel="icon" href="/images/logo.jpg" type="image/jpeg">    
</head>

<style>
    
    .tag {
        display: inline-block;
        padding: 0.25em 0.5em;
        background-color: #60f881;
        color: #ffffff;
        border-radius: 3px;
        font-size: 0.875em;
        font-weight: bold;
        margin-left: 0.5em;
    }

    .frozen .form-check-input {
        cursor: not-allowed;
        opacity: 0.5;
    }

    .frozen .form-check-label {
        color: #888;
    }

</style>

<body>

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Admin Dashboard</a>
        <div class="collapse navbar-collapse">

            <ul class="navbar-nav ml-auto">

                <li class="nav-item">
                    <a class="nav-link" href="#"><i class="fas fa-user"></i> Admin</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="#"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </li>

            </ul>

        </div>



    </nav>
    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-3 bg-light sidebar">
                <div class="sidebar-sticky">
        
                    <ul class="nav flex-column">
        
                        <li class="nav-item">
                            <a class="nav-link active" href="#"><i class="fas fa-home"></i> Dashboard</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="/fetch-all-assignments"><i class="fas fa-file-alt"></i> Assignments</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="/fetch-users"><i class="fas fa-users"></i> Users</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="/search-form"><i class="fas fa-chart-line"></i> search</a>
                        </li>
        
                        <li class="nav-item">
                            <a class="nav-link" href="#"><i class="fas fa-cogs"></i> Settings</a>
                        </li>

                    </ul>

                </div>

            </nav>
        


        
            <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Dashboard</h1>
                    
                    <div>
                        <button class="btn btn-primary" id="show-detailed-view">Show Detailed View</button>
                        <button class="btn btn-secondary" id="show-table-view">Show Table View</button>
                    </div>

                </div>

                


                <div id="assignments-container" class="row"></div>

                <div id="table-view" class="table-view">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Serial No.</th>
                                <th>Assignment ID</th>
                                <th>Assignment Type</th>
                                <th>Email</th>
                                <th>WhatsApp Number</th>
                                <th>Payment Status</th>
                                <th>Work Status</th>
                                <th>Assigned To</th>
                            </tr>
                        </thead>
                        <tbody id="table-body"></tbody>
                    </table>
                </div>
            </main>
        </div>
    </div>






    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.6.0/dist/umd/popper.min.js"></script>
    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    
    
    <script>

        let serialNumber = 1;
    
        document.addEventListener('DOMContentLoaded', function () {
            fetch('/admin/dashboard')
                .then(response => response.json())
    
                .then(assignments => {
                    const assignmentsContainer = document.getElementById('assignments-container');
                    const tableBody = document.getElementById('table-body');
    
    
                    assignments.forEach(assignment => {
                        const paymentTag = assignment.payment_status === 'paid' ? '<span class="tag">Payment Done</span>' : '';

                           
                        const isDeveloperAssigned = assignment.developer && assignment.developer !== '';


                        const assignmentCard = `
                            <div class="col-md-4 mb-4">
                                <div class="card">
                                    <div class="card-body">
    
                                        <h5 class="card-title">${assignment.assignmentType}</h5>

                                        <p><strong>Task ID:</strong><a href="/admin-assignment/${assignment._id}" class="task-link"> ${assignment._id}</a></p>
    
                                        <p class="card-text">Exact Deadline: ${assignment.exactDeadline}</p>
    
                                        <p class="card-text">Email: ${assignment.email}</p>

                                        <p class="card-text">WhatsApp Number: ${assignment.whatsapp}</p>
    
                                        <p class="card-text">Additional Details: ${assignment.additionalDetails}</p>
    
                                        <p class="card-text">Well Commented Code: ${assignment.wellCommentedCode}</p>
    
                                        <p class="card-text">Viva Preparation: ${assignment.vivaPreparation}</p>
    
                                        <p class="card-text">No Open Source: ${assignment.noOpenSource}</p>
    
                                        <p class="card-text">Programming Language: ${assignment.programmingLanguage}</p>
    
                                        <p class="card-text">Web Development Type: ${assignment.webDevelopmentType}</p>
    
                                        <p class="card-text">Full Stack Framework: ${assignment.fullStackFramework}</p>
    
                                        <p class="card-text">Top Programmer: ${assignment.topProgrammer}</p>
    
                                        <p class="card-text">Total Cost (Tentative): $${assignment.totalCost.toFixed(2)}</p>
    
                                        <p class="card-text">Status: ${assignment.status}</p>
    
                                        <p class="card-text payment-status-container">Payment Status: ${assignment.payment_status} ${paymentTag}</p>
                                         
                                        <p><strong>File URL:</strong> <a href="${assignment.fileUrl}" target="_blank">View File</a></p>
        
                                        <hr>    
                                        <br>
                                        <br>
                                        
                                        <h6 class="card-text"><b>Assigned To: ${assignment.developer}</b></h6>
                                        
                                        <h6 class="card-text"><b>Task Submission URL: <a href="${assignment.taskSubmissionUrl}" target="_blank">Our Work</a></b></h6>

                                        <br>
                                        <br>
                                        <hr>

                                        <div class="form-check">
                                            
                                            <input class="form-check-input work-started-checkbox" type="checkbox" value="" id="Started-${assignment._id}" ${assignment.status === 'Started' ? 'checked' : ''} data-id="${assignment._id}">

                                            <label class="form-check-label" for="Started-${assignment._id}">Work Started</label>
                                             
                                            <br>

                                            <input class="form-check-input work-ended-checkbox" type="checkbox" value="" id="Completed-${assignment._id}" ${assignment.status === 'Completed' ? 'checked' : ''} data-id="${assignment._id}">

                                            <label class="form-check-label" for="Completed-${assignment._id}">Work Completed</label>

                                        </div>
   
                                        <div class="form-check">
                                            
                                            <input class="form-check-input payment-status-checkbox" type="checkbox" value="" id="Paid-${assignment._id}" ${assignment.payment_status === 'Paid' ? 'checked' : ''} data-id="${assignment._id}">
                                            
                                            <label class="form-check-label" for="Paid-${assignment._id}">Mark as Paid</label>

                                        </div>

                                        <br>

                                        <form class="developer-form">
                                            
                                            <div class="form-group">
                                                
                                                <label for="developer-${assignment._id}">Task Assigned to:</label>
                                                
                                                <select id="developer-${assignment._id}"                            class="form-control" data-id="${assignment._id}">
                                                    
                                                    <option value="">Select Developer</option>

                                                    <option value="Rana Waqas Ali">Rana Waqas Ali</option>
                                            
                                                    <option value="Talha Khalid">Talha Khalid</option>

                                                </select>

                                            </div>

                                            <button type="button" class="btn btn-primary                            assign-developer-btn" data-id="${assignment._id}">Assign to Developer</button>

                                        </form>

                                        <br>

                                        <form id="assignmentForm" action="/admin/completed-work/submission" method="POST" enctype="multipart/form-data">
                                            
                                            <input type="hidden" name="assignmentId" value="${ assignment._id}">
                                            
                                            <input type="file" name="file" accept="*/*" required>
                                            
                                            <button type="submit" class="submit-btn">Send to User</button>
                                            
                                        </form>

                                    </div>

                                </div>

                            </div>
                        `;
                       
                        assignmentsContainer.insertAdjacentHTML('beforeend', assignmentCard);


                        const tableRow = `
                             <tr>
                                <td>${serialNumber++}</td>
                                <td><a href="/admin-assignment/${assignment._id}" class="task-link">${assignment._id}</a></td>
                                <td>${assignment.assignmentType}</td>
                                <td>${assignment.email}</td>
                                <td>${assignment.whatsapp}</td>
                                <td>${assignment.payment_status}</td>
                                <td>${assignment.status}</td>
                                <td>${isDeveloperAssigned ? assignment.developer : 'Not Assigned'}</td>
                            </tr>
                        `;

                        tableBody.insertAdjacentHTML('beforeend', tableRow);
                    });






                    document.getElementById('show-detailed-view').addEventListener('click', () => {
                        document.getElementById('assignments-container').style.display = 'flex';
                        document.getElementById('table-view').style.display = 'none';
                    });






                    document.getElementById('show-table-view').addEventListener('click', () => {
                        document.getElementById('assignments-container').style.display = 'none';
                        document.getElementById('table-view').style.display = 'block';                    
                    });






                    document.querySelectorAll('.work-started-checkbox').forEach(checkbox => {
                    
                        checkbox.addEventListener('change', function () {
                            const assignmentId = this.getAttribute('data-id');
                            const isChecked = this.checked;
                    
                            fetch(`/admin/update-status/${assignmentId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                    
                                body: JSON.stringify({ status: isChecked ? 'Started' : 'Not Started' })
                            })
                    
                            .then(response => response.json())
                            
                            .then(data => {
                    
                                if (data.message === 'Status updated') {
                                    alert('Status updated and email sent to user');

                                    this.disabled = true;
                                    this.closest('.form-check').classList.add('frozen');
                                } 
                                
                                else {
                                    alert('Error updating status');
                                }
                            })
                            
                            .catch(error => console.error('Error updating status:', error));

                        });
                    });
                    





                    document.querySelectorAll('.work-ended-checkbox').forEach(checkbox => {
                    
                    checkbox.addEventListener('change', function () {
                        const assignmentId = this.getAttribute('data-id');
                        const isChecked = this.checked;
                
                        fetch(`/admin/update-status/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                
                            body: JSON.stringify({ status: isChecked ? 'Completed' : 'Not Completed' })
                        })
                
                        .then(response => response.json())
                    
                        .then(data => {
                
                            if (data.message === 'Status updated') {
                                alert('Status updated and email sent to user');

                                this.disabled = true;
                                this.closest('.form-check').classList.add('frozen');
                            } 
                            
                            else {
                                alert('Error updating status');
                            }
                        })
                        
                        .catch(error => console.error('Error updating status:', error));

                    });
                });






                document.querySelectorAll('.payment-status-checkbox').forEach(checkbox => {
                    
                    checkbox.addEventListener('change', function () {
                        const assignmentId = this.getAttribute('data-id');
                        const isChecked = this.checked;
                    
                        fetch(`/admin/update-payment-status/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                            'Content-Type': 'application/json'
                            },
                    
                            body: JSON.stringify({ payment_status: isChecked ? 'Paid' : 'Not Paid Yet' })
                            })
                    
                            .then(response => response.json())
                            
                            .then(data => {
                    
                                if (data.message === 'Status updated') {
                                    alert('Payment status updated and email sent to user');
                                    const tagContainer = this.closest('.card-body').querySelector('.payment-status-container');
                    
                                    if (isChecked) {
                    
                                        if (!tagContainer.querySelector('.tag')) {
                                            const newTag = document.createElement('span');
                                            newTag.classList.add('tag');
                                            newTag.textContent = 'Payment Done';
                                            tagContainer.appendChild(newTag);
                                        }
                                    } 
                                    
                                    else {
                                        const tag = tagContainer.querySelector('.tag');
                                    
                                        if (tag) {
                                            tag.remove();
                                        }
                                    }

                                this.disabled = true;
                                this.closest('.form-check').classList.add('frozen');

                                } 
                                
                                else {
                                    alert('Error updating payment status');
                                }
                            })
                            
                            .catch(error => console.error('Error updating payment status:', error));

                        });
                    });

                    




                    document.querySelectorAll('.assign-developer-btn').forEach(button => {
                        button.addEventListener('click', function () {
                        const assignmentId = this.getAttribute('data-id');
                        const developerSelect = document.getElementById(`developer-${assignmentId}`);
                        const developerName = developerSelect.value;

                        if (!developerName) {
                            alert('Please select a developer');
                            return;
                        }

                        fetch(`/admin/update-developer/${assignmentId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ developer: developerName })
                        })

                        .then(response => response.json())
                        
                        .then(data => {
                            
                            if (data.message === 'Developer updated') {
                                alert('Developer assigned successfully');
                                const cardBody = this.closest('.card-body');
                                const developerInfo = cardBody.querySelector('.developer-info');

                            if (developerInfo) {
                                developerInfo.textContent = `Developer: ${developerName}`;
                            } 
                            
                            else {
                                const newInfo = document.createElement('p');
                                newInfo.classList.add('developer-info');
                                newInfo.textContent = `Developer: ${developerName}`;
                                cardBody.appendChild(newInfo);
                            }

                            const form = cardBody.querySelector('.developer-form');
                            
                            if (form) {
                                form.remove();
                            }

                            this.disabled = true;
                            developerSelect.disabled = true;
                        } 
                        
                        else {
                            alert('Error updating developer');
                        }
                    })

                    .catch(error => console.error('Error updating developer:', error));

                });
            });

            })
                                
                .catch(error => console.error('Error fetching assignments:', error));

            });


    </script>
</body>
</html>

